-- Load Solara library
local Solara = loadstring(game:HttpGet("https://raw.githubusercontent.com/your-repo/solara/main/source"))()
local Window = Solara:CreateWindow("Tyrant Hub")

-- Initialize variables
local magEnabled = false
local customDistance = 10
local magnetDelayEnabled = false
local magnetDelay = 0
local showTransparencyState = false
local walkspeedEnabled = false
local walkspeedValue = 0.3
local jumpPowerEnabled = false
local jumpPowerValue = 50

-- Anti-Cheat Bypass
if not LPH_OBFUSCATED then
    getfenv().LPH_NO_VIRTUALIZE = function(f) return f end
    getfenv().LPH_JIT_MAX = function(f) return f end
end

if game.PlaceId == 8204899140 then
    LPH_JIT_MAX(function()
        local Hooks = {}
        local Targets = {}
        local Whitelisted = {
            {655, 775, 724, 633, 891},
            {760, 760, 771, 665, 898},
            {660, 759, 751, 863, 771},
        }

        local function TableEquality(x, y)
            if (#x ~= #y) then return false end
            for i, v in next, x do
                if (y[i] ~= v) then return false end
            end
            return true
        end

        LPH_NO_VIRTUALIZE(function()
            for i, v in next, getgc(true) do
                if (type(v) == "function") then
                    local ScriptTrace, Line = debug.info(v, "sl")
                    if string.find(ScriptTrace, "PlayerModule.LocalScript") and table.find({42, 51, 61}, Line) then
                        table.insert(Targets, v)
                    end
                end
                if (type(v) == "table") and (rawlen(v) == 19) and getrawmetatable(v) then
                    Targets.call = rawget(getrawmetatable(v), "call")
                end
            end
        end)()

        if not (Targets[1] and Targets[2] and Targets[3] and Targets.call) then
            warn("Bypass failed to load properly")
            return
        end

        local ScriptPath = debug.info(Targets[1], "s")

        Hooks.debug_info = hookfunction(debug.info, LPH_NO_VIRTUALIZE(function(...)
            if not checkcaller() and TableEquality({...}, {2, "s"}) then
                return ScriptPath
            end
            return Hooks.debug_info(...)
        end))

        hookfunction(Targets[1], LPH_NO_VIRTUALIZE(function() end))
        hookfunction(Targets[2], LPH_NO_VIRTUALIZE(function() end))
        hookfunction(Targets[3], LPH_NO_VIRTUALIZE(function() end))

        Hooks.call = hookfunction(Targets.call, LPH_NO_VIRTUALIZE(function(self, ...)
            if TableEquality(Whitelisted[1], {...}) or TableEquality(Whitelisted[2], {...}) or TableEquality(Whitelisted[3], {...}) then
                return Hooks.call(self, ...)
            end
        end))

        task.wait(3)
    end)
end

-- Create UI
local Tab1 = Window:CreateTab("Player")
local Tab2 = Window:CreateTab("Features")

-- Player Tab
Tab1:CreateToggle({
    Name = "Walkspeed",
    Default = false,
    Callback = function(value)
        walkspeedEnabled = value
        if value then
            startMovement()
        else
            stopMovement()
        end
    end
})

Tab1:CreateSlider({
    Name = "Walkspeed Value",
    Min = 0,
    Max = 0.45,
    Default = 0.3,
    Increment = 0.01,
    ValueName = "Speed",
    Callback = function(value)
        walkspeedValue = value
    end
})

Tab1:CreateToggle({
    Name = "JumpPower",
    Default = false,
    Callback = function(value)
        jumpPowerEnabled = value
        if value then
            startJumpPower()
        else
            stopJumpPower()
        end
    end
})

Tab1:CreateSlider({
    Name = "JumpPower Value",
    Min = 50,
    Max = 300,
    Default = 50,
    Increment = 1,
    ValueName = "Power",
    Callback = function(value)
        jumpPowerValue = value
    end
})

-- Features Tab
Tab2:CreateToggle({
    Name = "Magnets",
    Default = false,
    Callback = function(value)
        magEnabled = value
    end
})

Tab2:CreateSlider({
    Name = "Magnets Range",
    Min = 1,
    Max = 25,
    Default = 10,
    Increment = 0.1,
    ValueName = "Range",
    Callback = function(value)
        customDistance = value
    end
})

Tab2:CreateToggle({
    Name = "Magnets Delay",
    Default = false,
    Callback = function(value)
        magnetDelayEnabled = value
    end
})

Tab2:CreateSlider({
    Name = "Magnets Delay",
    Min = 0,
    Max = 1,
    Default = 0,
    Increment = 0.1,
    ValueName = "Delay",
    Callback = function(value)
        magnetDelay = value
    end
})

Tab2:CreateToggle({
    Name = "ShowHitbox",
    Default = false,
    Callback = function(value)
        showTransparencyState = value
    end
})

-- Functions
local function startMovement()
    task.spawn(function()
        while walkspeedEnabled do
            local player = game:GetService("Players").LocalPlayer
            local character = player.Character
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoidRootPart and humanoid then
                    humanoidRootPart.CFrame = humanoidRootPart.CFrame + humanoid.MoveDirection * walkspeedValue
                end
            end
            task.wait()
        end
    end)
end

local function stopMovement()
    walkspeedEnabled = false
end

local function startJumpPower()
    task.spawn(function()
        while jumpPowerEnabled do
            local player = game:GetService("Players").LocalPlayer
            local character = player.Character
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoidRootPart and humanoid then
                    if humanoid:GetState() == Enum.HumanoidStateType.Jumping then
                        humanoidRootPart.CFrame = humanoidRootPart.CFrame + Vector3.new(0, jumpPowerValue / 50, 0)
                    end
                end
            end
            task.wait()
        end
    end)
end

local function stopJumpPower()
    jumpPowerEnabled = false
end

local function updateMagnetStatus()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character

    if character then
        local left = character:FindFirstChild("CatchLeft")
        local right = character:FindFirstChild("CatchRight")

        if left and right then
            if magEnabled then
                if magnetDelayEnabled then
                    wait(magnetDelay)
                end

                left.Size = Vector3.new(customDistance, customDistance, customDistance)
                right.Size = Vector3.new(customDistance, customDistance, customDistance)
                left.Transparency = showTransparencyState and 0.8 or 1
                right.Transparency = showTransparencyState and 0.8 or 1
            else
                left.Size = left.Size
                right.Size = right.Size
                left.Transparency = left.Transparency
                right.Transparency = right.Transparency
            end
        end
    end
end

task.spawn(function()
    while true do
        updateMagnetStatus()
        wait(1)
    end
end)
