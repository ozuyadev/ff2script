-- Anti-Cheat Bypass Setup
if not LPH_OBFUSCATED then
    getfenv().LPH_NO_VIRTUALIZE = function(f) return f end
    getfenv().LPH_JIT_MAX = function(f) return f end
end

if game.PlaceId == 8204899140 then
    LPH_JIT_MAX(function()
        local Hooks = {}
        local Targets = {}
        local Whitelisted = {
            {655, 775, 724, 633, 891},
            {760, 760, 771, 665, 898},
            {660, 759, 751, 863, 771},
        }

        local function TableEquality(x, y)
            if (#x ~= #y) then
                return false
            end
            for i, v in next, x do
                if (y[i] ~= v) then
                    return false
                end
            end
            return true
        end

        LPH_NO_VIRTUALIZE(function()
            for i, v in next, getgc(true) do
                if (type(v) == "function") then
                    local ScriptTrace, Line = debug.info(v, "sl")
                    if string.find(ScriptTrace, "PlayerModule.LocalScript") and table.find({42, 51, 61}, Line) then
                        table.insert(Targets, v)
                    end
                end
                if (type(v) == "table") and (rawlen(v) == 19) and getrawmetatable(v) then
                    Targets.call = rawget(getrawmetatable(v), "call")
                end
            end
        end)()

        if not (Targets[1] and Targets[2] and Targets[3] and Targets.call) then
            warn("Bypass failed to load properly")
            return
        end

        local ScriptPath = debug.info(Targets[1], "s")
        Hooks.debug_info = hookfunction(debug.info, LPH_NO_VIRTUALIZE(function(...)
            if not checkcaller() and TableEquality({...}, {2, "s"}) then
                return ScriptPath
            end
            return Hooks.debug_info(...)
        end))

        hookfunction(Targets[1], LPH_NO_VIRTUALIZE(function() end))
        hookfunction(Targets[2], LPH_NO_VIRTUALIZE(function() end))
        hookfunction(Targets[3], LPH_NO_VIRTUALIZE(function() end))

        Hooks.call = hookfunction(Targets.call, LPH_NO_VIRTUALIZE(function(self, ...)
            if TableEquality(Whitelisted[1], {...}) or
               TableEquality(Whitelisted[2], {...}) or
               TableEquality(Whitelisted[3], {...})
            then
                return Hooks.call(self, ...)
            end
        end))

        task.wait(3)
    end)()
end

-- Load Kronos UI
local KronosUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/UI-Librarys/main/Kronos/Kronos.lua"))()
local Window = KronosUI:CreateWindow("Tyrant Hub")

-- Catching Tab
local CatchingTab = Window:CreateTab("Catching")

local magEnabled = false
local customDistance = 10
local magnetDelayEnabled = false
local magnetDelay = 0
local showTransparencyState = false

CatchingTab:AddSection("Magnets")

CatchingTab:AddToggle({
    Name = "Magnets",
    Default = false,
    Callback = function(value)
        magEnabled = value
    end,
})

CatchingTab:AddSlider({
    Name = "Magnets Range",
    Min = 1,
    Max = 50,
    Default = 10,
    Callback = function(value)
        customDistance = value
    end,
})

CatchingTab:AddToggle({
    Name = "Magnets Delay",
    Default = false,
    Callback = function(value)
        magnetDelayEnabled = value
    end,
})

CatchingTab:AddSlider({
    Name = "Magnets Delay",
    Min = 0,
    Max = 1,
    Default = 0,
    Callback = function(value)
        magnetDelay = value
    end,
})

CatchingTab:AddToggle({
    Name = "Show Hitbox",
    Default = false,
    Callback = function(value)
        showTransparencyState = value
    end,
})

local function updateMagnetStatus()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character

    if character then
        local ball = workspace:FindFirstChild("Football")
        
        if ball then
            if magEnabled then
                if magnetDelayEnabled then
                    wait(magnetDelay) 
                end
                ball.Size = Vector3.new(customDistance, customDistance, customDistance)
                ball.Transparency = showTransparencyState and 0.8 or 1
                -- Create or update hitbox indicator
                local hitboxIndicator = workspace:FindFirstChild("HitboxIndicator")
                if showTransparencyState then
                    if not hitboxIndicator then
                        hitboxIndicator = Instance.new("Part")
                        hitboxIndicator.Name = "HitboxIndicator"
                        hitboxIndicator.Size = Vector3.new(customDistance, customDistance, customDistance)
                        hitboxIndicator.Color = Color3.fromRGB(128, 128, 128)  -- Grey color
                        hitboxIndicator.Anchored = true
                        hitboxIndicator.CanCollide = false
                        hitboxIndicator.Transparency = 0.5
                        hitboxIndicator.Parent = workspace
                    else
                        hitboxIndicator.Size = Vector3.new(customDistance, customDistance, customDistance)
                        hitboxIndicator.Transparency = 0.5
                    end
                elseif hitboxIndicator then
                    hitboxIndicator:Destroy()
                end
            else
                ball.Size = Vector3.new(1, 1, 1)
                ball.Transparency = 1
                -- Remove hitbox indicator
                local hitboxIndicator = workspace:FindFirstChild("HitboxIndicator")
                if hitboxIndicator then
                    hitboxIndicator:Destroy()
                end
            end
        end
    end
end

spawn(function()
    while true do
        updateMagnetStatus()
        wait(1)
    end
end)

-- Player Tab
local PlayerTab = Window:CreateTab("Player")

local walkspeedEnabled = false
local jumpPowerEnabled = false
local currentWalkspeed = 20
local currentJumpPower = 50

PlayerTab:AddToggle({
    Name = "Walkspeed",
    Default = false,
    Callback = function(value)
        walkspeedEnabled = value
    end
})

PlayerTab:AddSlider({
    Name = "Walkspeed",
    Min = 20,
    Max = 25,
    Default = 20,
    Callback = function(value)
        currentWalkspeed = value
    end
})

PlayerTab:AddToggle({
    Name = "JumpPower",
    Default = false,
    Callback = function(value)
        jumpPowerEnabled = value
    end
})

PlayerTab:AddSlider({
    Name = "JumpPower",
    Min = 50,
    Max = 65,
    Default = 50,
    Callback = function(value)
        currentJumpPower = value
    end
})

-- QB Tab
local QBTab = Window:CreateTab("QB")

local aimbotEnabled = false
local aimbotPower = 10

QBTab:AddToggle({
    Name = "QB Aimbot",
    Default = false,
    Callback = function(value)
        aimbotEnabled = value
    end
})

QBTab:AddSlider({
    Name = "Aimbot Power",
    Min = 1,
    Max = 15,
    Default = 10,
    Callback = function(value)
        aimbotPower = value
    end
})

-- Info Tab
local InfoTab = Window:CreateTab("Info")

InfoTab:AddSection("Details")

InfoTab:AddLabel("Owner: Ozuya")
InfoTab:AddLabel("Game: Football Fusion 2")

-- Apply Player Settings
local function applyPlayerSettings()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = walkspeedEnabled and currentWalkspeed or 16
            humanoid.JumpPower = jumpPowerEnabled and currentJumpPower or 50
        end
    end
end

spawn(function()
    while true do
        applyPlayerSettings()
        wait(0.1)
    end
end)

-- QB Aimbot Function
local function updateAimbot()
    local player = game:GetService("Players").LocalPlayer
    local character = player.Character
    local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
    local ball = workspace:FindFirstChild("Football")

    if aimbotEnabled and ball then
        local ballPos = ball.Position
        if humanoidRootPart then
            local direction = (ballPos - humanoidRootPart.Position).Unit
            humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position, ballPos)
            
            -- Visualization of Ball Path
            local pathIndicator = workspace:FindFirstChild("PathIndicator")
            if not pathIndicator then
                pathIndicator = Instance.new("Part")
                pathIndicator.Name = "PathIndicator"
                pathIndicator.Size = Vector3.new(1, 1, 1)
                pathIndicator.Color = Color3.fromRGB(255, 0, 0) -- Red color
                pathIndicator.Anchored = true
                pathIndicator.CanCollide = false
                pathIndicator.Transparency = 0.5
                pathIndicator.Parent = workspace
            end
            pathIndicator.Position = humanoidRootPart.Position:Lerp(ballPos, aimbotPower / 15)
            pathIndicator.Size = Vector3.new(0.2, (ballPos - humanoidRootPart.Position).Magnitude, 0.2)
        end
    end
end

spawn(function()
    while true do
        updateAimbot()
        wait(0.1)
    end
end)
