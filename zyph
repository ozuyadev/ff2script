-- Anti-Cheat Bypass for Solara
if getgenv().tyrant then 
    warn("tyrant is already executed") 
    return 
end
getgenv().tyrant = true

local function bypassAnticheat()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Handshake = ReplicatedStorage:FindFirstChild("CharacterSoundEvent")
    if not Handshake then return end

    local Hooks = {}
    local HandshakeInts = {}

    Hooks.__namecall = hookmetamethod(game, "__namecall", function(self, ...)
        local Method = getnamecallmethod()
        local Args = {...}

        if not checkcaller() and self == Handshake and Method == "fireServer" and string.find(Args[1], "AC") then
            if #HandshakeInts == 0 then
                HandshakeInts = {table.unpack(Args[2], 2, 18)}
            else
                for i, v in ipairs(HandshakeInts) do  
                    Args[2][i + 1] = v
                end
            end
        end

        return Hooks.__namecall(self, ...)
    end)

    -- Wait for initial setup
    task.wait()

    -- Hook function replacements
    for i, v in getgc() do
        if typeof(v) == "function" and islclosure(v) then
            if #getprotos(v) == 1 and table.find(getconstants(getproto(v, 1)), 4000001) then
                hookfunction(v, function() end)
            end
        end
    end
end

bypassAnticheat()

-- Zypher UI Integration
local ZypherURL = "https://raw.githubusercontent.com/GhostDuckyy/UI-Libraries/main/Zypher/source.lua"

local function loadZypherUI()
    local Zypher, success = nil, false
    success, Zypher = pcall(function()
        return loadstring(game:HttpGet(ZypherURL))()
    end)
    if not success or not Zypher then
        warn("Failed to load Zypher UI from URL")
        return
    end
    return Zypher
end

local ZypherUI = loadZypherUI()
if ZypherUI then
    local Window, success = nil, false
    success, Window = pcall(function() return ZypherUI:CreateWindow("Football Fusion 2") end)
    if not success or not Window then
        warn("Failed to create Zypher UI window")
        return
    end

    -- Create Tabs
    local function createTab(tabName, tabIcon)
        local success, tab = pcall(function()
            return Window:CreateTab({
                Name = tabName,
                Icon = tabIcon,
            })
        end)
        if not success or not tab then
            warn("Failed to create tab:", tabName)
        end
        return tab
    end

    -- Create Tabs and Add Features
    local CatchingTab = createTab("Catching", "rbxassetid://4483345998")
    if CatchingTab then
        local magEnabled = false
        local customDistance = 10
        local magnetDelayEnabled = false
        local magnetDelay = 0
        local showTransparencyState = false
        local hitboxIndicator = nil
        local ballPredictionEnabled = false
        local predictionMarker = nil

        CatchingTab:AddSection("Magnets")
        CatchingTab:AddToggle({
            Name = "Magnets",
            Default = false,
            Callback = function(value) magEnabled = value end
        })
        CatchingTab:AddSlider({
            Name = "Magnets Range",
            Min = 1,
            Max = 25,
            Default = 10,
            Color = Color3.fromRGB(255, 255, 255),
            Increment = 0.1,
            ValueName = "Range",
            Callback = function(value) customDistance = value end
        })
        CatchingTab:AddToggle({
            Name = "Magnets Delay",
            Default = false,
            Callback = function(value) magnetDelayEnabled = value end
        })
        CatchingTab:AddSlider({
            Name = "Magnets Delay",
            Min = 0,
            Max = 1,
            Default = 0,
            Color = Color3.fromRGB(255, 255, 255),
            Increment = 0.1,
            ValueName = "Delay",
            Callback = function(value) magnetDelay = value end
        })
        CatchingTab:AddToggle({
            Name = "Show Hitbox",
            Default = false,
            Callback = function(value)
                showTransparencyState = value
                if hitboxIndicator then
                    hitboxIndicator.Transparency = showTransparencyState and 0.3 or 1
                end
            end
        })
        CatchingTab:AddToggle({
            Name = "Ball Prediction",
            Default = false,
            Callback = function(value)
                ballPredictionEnabled = value
                if predictionMarker then
                    predictionMarker:Destroy()
                    predictionMarker = nil
                end
            end
        })

        local function updateMagnetStatus()
            local player = game:GetService("Players").LocalPlayer
            local character = player.Character

            if character then
                local ball = workspace:FindFirstChild("Football")

                if ball then
                    if magEnabled then
                        if magnetDelayEnabled then
                            wait(magnetDelay)
                        end
                        ball.Size = Vector3.new(customDistance, customDistance, customDistance)

                        local hand = character:FindFirstChild("RightHand") or character:FindFirstChild("LeftHand")
                        if hand then
                            local direction = (hand.Position - ball.Position).Unit
                            local force = Instance.new("BodyVelocity")
                            force.Velocity = direction * 150
                            force.MaxForce = Vector3.new(10000, 10000, 10000)
                            force.Parent = ball
                            game:GetService("Debris"):AddItem(force, 0.1)
                        end

                        if showTransparencyState then
                            if not hitboxIndicator then
                                hitboxIndicator = Instance.new("Part")
                                hitboxIndicator.Name = "HitboxIndicator"
                                hitboxIndicator.Size = Vector3.new(customDistance, customDistance, customDistance)
                                hitboxIndicator.Color = Color3.fromRGB(128, 128, 128)
                                hitboxIndicator.Anchored = true
                                hitboxIndicator.CanCollide = false
                                hitboxIndicator.Transparency = 0.3
                                hitboxIndicator.Parent = ball
                            else
                                hitboxIndicator.Size = Vector3.new(customDistance, customDistance, customDistance)
                                hitboxIndicator.Transparency = 0.3
                            end
                        elseif hitboxIndicator then
                            hitboxIndicator:Destroy()
                            hitboxIndicator = nil
                        end
                    else
                        ball.Size = Vector3.new(1, 1, 1)
                        ball.Transparency = 1
                        if hitboxIndicator then
                            hitboxIndicator:Destroy()
                            hitboxIndicator = nil
                        end
                    end

                    if ballPredictionEnabled then
                        local velocity = ball:FindFirstChildOfClass("BodyVelocity")
                        if velocity then
                            local predictedPosition = ball.Position + (velocity.Velocity * 10)
                            if not predictionMarker then
                                predictionMarker = Instance.new("Part")
                                predictionMarker.Name = "PredictionMarker"
                                predictionMarker.Size = Vector3.new(1, 1, 1)
                                predictionMarker.Color = Color3.fromRGB(255, 0, 0)
                                predictionMarker.Anchored = true
                                predictionMarker.CanCollide = false
                                predictionMarker.Transparency = 0.5
                                predictionMarker.Parent = workspace
                            end
                            predictionMarker.Position = predictedPosition
                        else
                            if predictionMarker then
                                predictionMarker:Destroy()
                                predictionMarker = nil
                            end
                        end
                    else
                        if predictionMarker then
                            predictionMarker:Destroy()
                            predictionMarker = nil
                        end
                    end
                end
            end
        end

        spawn(function()
            while true do
                updateMagnetStatus()
                wait(1)
            end
        end)
    end

    -- Create "Player" Tab
    local PlayerTab = createTab("Player", "rbxassetid://4483345998")
    if PlayerTab then
        local walkspeedEnabled = false
        local jumpPowerEnabled = false
        local currentWalkspeed = 16
        local currentJumpPower = 50

        PlayerTab:AddToggle({
            Name = "Enable Walkspeed",
            Default = false,
            Callback = function(value) walkspeedEnabled = value end
        })
        PlayerTab:AddSlider({
            Name = "Walkspeed",
            Min = 16,
            Max = 25,
            Default = 16,
            Color = Color3.fromRGB(255, 255, 255),
            Increment = 1,
            ValueName = "Speed",
            Callback = function(value) currentWalkspeed = value end
        })
        PlayerTab:AddToggle({
            Name = "Enable JumpPower",
            Default = false,
            Callback = function(value) jumpPowerEnabled = value end
        })
        PlayerTab:AddSlider({
            Name = "JumpPower",
            Min = 50,
            Max = 60,
            Default = 50,
            Color = Color3.fromRGB(255, 255, 255),
            Increment = 1,
            ValueName = "Power",
            Callback = function(value) currentJumpPower = value end
        })

        local function updatePlayerStats()
            local player = game:GetService("Players").LocalPlayer
            local character = player.Character

            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = walkspeedEnabled and currentWalkspeed or 16
                    humanoid.JumpPower = jumpPowerEnabled and currentJumpPower or 50
                end
            end
        end

        spawn(function()
            while true do
                updatePlayerStats()
                wait(1)
            end
        end)
    end

    -- Create "Misc" Tab
    local MiscTab = createTab("Misc", "rbxassetid://4483345998")
    if MiscTab then
        local followBallCarrier = false
        local ballPredictionEnabled = false

        MiscTab:AddToggle({
            Name = "Follow Ball Carrier",
            Default = false,
            Callback = function(value) followBallCarrier = value end
        })
        MiscTab:AddToggle({
            Name = "Ball Prediction",
            Default = false,
            Callback = function(value) ballPredictionEnabled = value end
        })

        local function updateMiscFeatures()
            local player = game:GetService("Players").LocalPlayer
            if followBallCarrier then
                local ball = workspace:FindFirstChild("Football")
                if ball then
                    player.Character:SetPrimaryPartCFrame(ball.CFrame)
                end
            end

            if ballPredictionEnabled then
                -- Add prediction logic here if needed
            end
        end

        spawn(function()
            while true do
                updateMiscFeatures()
                wait(1)
            end
        end)
    end

    -- Create "Info" Tab
    local InfoTab = createTab("Info", "rbxassetid://4483345998")
    if InfoTab then
        InfoTab:AddLabel("Owner: Ozuya")
        InfoTab:AddLabel("Game: Football Fusion 2")
    end

else
    warn("Failed to load Zypher UI or Zypher UI script is incorrect.")
end
